import{_ as n,o as s,c as a,d as e}from"./app-39c5096f.js";const p={},t=e(`<h1 id="简单说两句" tabindex="-1"><a class="header-anchor" href="#简单说两句" aria-hidden="true">#</a> 简单说两句</h1><p>观察者模式，是对象行为型模式中的一种，有的时候人们也叫他发布/订阅模式。当我们需要在一个对象状态改变的时候通知到其它对象，这时候就可以考虑一下观察者模式。</p><h1 id="细思不恐" tabindex="-1"><a class="header-anchor" href="#细思不恐" aria-hidden="true">#</a> 细思不恐</h1><p><img src="https://segmentfault.com/img/remote/1460000013873971?w=425&amp;h=379" alt="观察者模式"></p><ul><li><h3 id="主旨" tabindex="-1"><a class="header-anchor" href="#主旨" aria-hidden="true">#</a> 主旨</h3></li></ul><p>在设计模式中，观察者模式的主旨则是定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><ul><li><h3 id="解惑" tabindex="-1"><a class="header-anchor" href="#解惑" aria-hidden="true">#</a> 解惑</h3></li></ul><p>在上面我们说到，有时观察者模式也称发布/订阅模式，那到底有啥区别呢？其实发布订阅模式是处于广义上的观察者模式，因为他是最常用的一种观察者模式的实现。</p><p>发布订阅模式相对观察者多了一个事件的通道，因为在观察者模式中，观察者（Observer）需要直接订阅目标（Subject）事件，在目标发出内容更改事件时，直接接收内容事件并做出响应。在发布订阅模式中订阅者需要从时间的通道中订阅事件，这样从发布者接收事件以及向订阅者发布事件，两者并没有产生依赖的关系。</p><p>具体代码上的区别，有兴趣的朋友可以在下方留言，下次可以出一个小分支。</p><ul><li><h3 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式" aria-hidden="true">#</a> 实现方式</h3></li></ul><p>在上面的介绍中，我们大概知道了在观察者模式中，有这么两种主角色：</p><ul><li>Subject（被观察者）</li></ul><p>被观察者必须要有添加观察者、删除观察者和提醒观察者的方法。</p><ul><li>Observer（观察者）</li></ul><p>观察者要有更新方法，用来做出响应在状态改变调用提醒方法后。</p><p>Java中已经提供了观察者模式的实现，我们不需要再定义观察者和目标接口(被观察者)，也不需要维护观察者的注册信息。可以继承Observable类实现被观察者目标对象，实现Observer接口完成具体的观察者对象，其中提供了update方法获取相应事件信息。</p><p>在这里为了方便说明观察者的基本原理，自己实现一个简单的案例。</p><p>首先抽象一个观察者类，里面有一个抽象方法更新状态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Oberver</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再写一个抽象被观察者类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>
    <span class="token comment">//增加  </span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Attach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">//移除  </span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Detach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">//通知  </span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体上面两个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//具体的观察者  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteObserver</span>  <span class="token keyword">extends</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;状态改变,更新状态&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  

<span class="token comment">//具体被观察者类  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  
      
    <span class="token comment">//定义集合存储观察者  </span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      
    <span class="token comment">//增加观察者</span>
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Attach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Detach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">//遍历集合观察者对象  </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token class-name"><span class="token namespace">observer<span class="token punctuation">.</span></span>Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们就可以写测试类了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverDemo</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    
        <span class="token comment">//创建被观察者对象  </span>
        <span class="token class-name">ConcreteSubject</span> csb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//创建观察者对象</span>
        <span class="token class-name">ConcreteObserver</span> cob<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
          
        <span class="token comment">//将观察者添加到被观察者的通知名单内  </span>
        <span class="token class-name"><span class="token namespace">csb<span class="token punctuation">.</span></span>Attach</span><span class="token punctuation">(</span>cob<span class="token punctuation">)</span><span class="token punctuation">;</span>  
          
        <span class="token comment">//被观察者发出通知，观察者接受通知更新状态  </span>
        <span class="token class-name"><span class="token namespace">csb<span class="token punctuation">.</span></span>Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> 

<span class="token comment">//输出</span>
“状态改变<span class="token punctuation">,</span>更新状态”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就这样，一个简单的观察者模式的案例就结束了。当然一个复杂的应用中，我们肯定需要一个完整而且适用与多线程以及异步系统，因为观察者模式大都应用与这两中系统，所以也需要考虑线程安全的问题。下次会介绍更加详细完整的观察者的实现方式。</p><h1 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h1><p>因为每一篇的篇幅不宜过长，所以本打字员尽量在精简自己所写的内容，尽量能够多容扩一些知识点，但是具体的知识横向扩展可能就有一点欠缺，这也算是对自己的一种锻炼，希望大家能够一起进步，怎么样，在下面留个言吐槽一下本渣渣吧。（逃</p>`,29),c=[t];function l(o,i){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","121501.html.vue"]]);export{d as default};
