import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, f as createStaticVNode } from "./app-a78375d3.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "div",
  { class: "custom-container info" },
  [
    /* @__PURE__ */ createBaseVNode("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      "xmlns:xlink": "http://www.w3.org/1999/xlink",
      viewBox: "0 0 24 24"
    }, [
      /* @__PURE__ */ createBaseVNode("g", {
        fill: "none",
        stroke: "currentColor",
        "stroke-width": "2",
        "stroke-linecap": "round",
        "stroke-linejoin": "round"
      }, [
        /* @__PURE__ */ createBaseVNode("circle", {
          cx: "12",
          cy: "12",
          r: "9"
        }),
        /* @__PURE__ */ createBaseVNode("path", { d: "M12 8h.01" }),
        /* @__PURE__ */ createBaseVNode("path", { d: "M11 12h1v4h1" })
      ])
    ]),
    /* @__PURE__ */ createBaseVNode("p", { class: "custom-container-title" }, "INFO"),
    /* @__PURE__ */ createBaseVNode("p", null, "本文首发公众号【一名打字员】")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<h3 id="续节" tabindex="-1"><a class="header-anchor" href="#续节" aria-hidden="true">#</a> 续节</h3><p>上回书说到，师徒四人途经狮驼国，狮驼国三位国师对唐僧心怀不轨，要与师徒四人进行斗法。咳，跑偏了跑偏了。</p><p>大家静一静，上一次最后我们介绍了Express的模板引擎，今天我们接着上次的继续。</p><h3 id="庖丁解牛-续" tabindex="-1"><a class="header-anchor" href="#庖丁解牛-续" aria-hidden="true">#</a> 庖丁解牛（续）</h3><ul><li>更换模板引擎</li></ul><p>首先我们在 <code>package.json</code> 文件中 <code>dependencies</code> 节点增加包：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code> <span class="token property">&quot;ejs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~2.5.2&quot;</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行 <code>npm install</code> 编译过后，修改 <code>app.js</code> 文件中的模板渲染一行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//将jade换成ejs</span>\napp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;view engine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ejs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将 <code>index.jade</code> 换成 <code>index.ejs</code> ，因为现在我们已经将模板切换到ejs了。 下面是 <code> index.js</code> 文件内容。</p><div class="language-ejs line-numbers-mode" data-ext="ejs"><pre class="language-ejs"><code><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">include header<span class="token punctuation">.</span>ejs </span><span class="token delimiter punctuation">%&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Wecolme to <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">title</span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">include footer<span class="token punctuation">.</span>ejs </span><span class="token delimiter punctuation">%&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在java程序员是不是看着顺眼了很多呢，这仅仅是个人习惯，仅供参考。</p><ul><li>工程目录总览</li></ul><p>现在我们回顾一下整体工程的目录结构：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>- bin            # 命令文件\n- node_modules   # 下载的依赖包\n- public         # 静态资源目录\n- routes         # 路由文件\n- views          # 视图模板文件\n  app.js         # 入口文件\n  package.json   # 工程依赖配置文件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在相信大家对整个项目已经有了基本的认识了，接下来我们就开始对微信公众号的集成了。</p><h3 id="集成微信公众号" tabindex="-1"><a class="header-anchor" href="#集成微信公众号" aria-hidden="true">#</a> 集成微信公众号</h3>', 17);
const _hoisted_19 = {
  href: "https://mp.weixin.qq.com/wiki",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_20 = /* @__PURE__ */ createStaticVNode('<p><img src="https://segmentfault.com/img/bVZo2k" alt="clipboard.png"></p><p>然后填上我们的服务器配置，由于我们暂时还没有写，所以这里暂时先写上 <code>http://www.dailyguitar.cc/wechat/index</code>。</p><p>接下来我们就得写对 <code>/wechat/index</code> 的处理了。</p><ul><li>验证服务端的有效性</li></ul><p>微信会对上面我们填写的地址进行有效性的检测，它会用请求我们的地址，我们必须对它请求过来的参数进行解密，然后返回同样的数据给它，否则将无法使用公众平台的相关接口。</p><p>首先我们在 <code>index.js</code> 中加入如下代码，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 微信校验 */</span>\n<span class="token keyword">var</span> token<span class="token operator">=</span><span class="token string">&quot;weixin&quot;</span><span class="token punctuation">;</span>\n\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/wechat/index&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> signature <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>signature<span class="token punctuation">;</span>\n        <span class="token keyword">var</span> timestamp <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>\n        <span class="token keyword">var</span> nonce <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>nonce<span class="token punctuation">;</span>\n        <span class="token keyword">var</span> echostr <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>echostr<span class="token punctuation">;</span>\n        <span class="token comment">/*  加密/校验流程如下： */</span>\n        <span class="token comment">//1. 将token、timestamp、nonce三个参数进行字典序排序</span>\n        <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span>timestamp<span class="token punctuation">,</span>nonce<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> str <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//2. 将三个参数字符串拼接成一个字符串进行sha1加密</span>\n        <span class="token keyword">var</span> sha1Code <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&quot;sha1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> code <span class="token operator">=</span> sha1Code<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//3. 获得加密后的字符串可与signature对比，标识该请求来源于微信</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>code<span class="token operator">===</span>signature<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token operator">+</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error:&quot;</span><span class="token operator">+</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中我们用到了一个加密模块 <code>crypto</code> ，我们需要手动引用一下，然后我们将项目运行起来，由于微信需要用到域名否则无法进行调试，这里本猿推荐两个内网穿透工具，一个是花生壳一个叫做ngrok，大家可以自己研究研究。</p><p>到这里其实与微信的对接已经完成了，在微信后台我们就可以配置成功了，记得别忘了我们的token哟。</p><ul><li>处理微信消息</li></ul><p>当用户和我们的公众号发生操作的时候，微信会发送post请求到我们配置的URL中，所以我们只需要接收微信发过来的xml数据进行解析，并以xml的格式返回数据即可完成对消息的回复。 所以我们得对 <code>index.js</code> 再增加一个post的捕捉。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 微信消息处理 */</span>\nrouter<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/wechat/index&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> bodyData<span class="token punctuation">;</span>\n	    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	        <span class="token comment">/*微信服务器传过来的是xml格式的，是buffer类型，\n	        	需要通过toString把xml转换为字符串*/</span>\n	        bodyData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n	    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n	    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	        <span class="token keyword">var</span> ToUserName <span class="token operator">=</span> <span class="token function">getXMLNodeValue</span><span class="token punctuation">(</span><span class="token string">&#39;ToUserName&#39;</span><span class="token punctuation">,</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        <span class="token keyword">var</span> FromUserName <span class="token operator">=</span> <span class="token function">getXMLNodeValue</span><span class="token punctuation">(</span><span class="token string">&#39;FromUserName&#39;</span><span class="token punctuation">,</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        <span class="token keyword">var</span> CreateTime <span class="token operator">=</span> <span class="token function">getXMLNodeValue</span><span class="token punctuation">(</span><span class="token string">&#39;CreateTime&#39;</span><span class="token punctuation">,</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        <span class="token keyword">var</span> MsgType <span class="token operator">=</span> <span class="token function">getXMLNodeValue</span><span class="token punctuation">(</span><span class="token string">&#39;MsgType&#39;</span><span class="token punctuation">,</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        <span class="token keyword">var</span> Content <span class="token operator">=</span> <span class="token function">getXMLNodeValue</span><span class="token punctuation">(</span><span class="token string">&#39;Content&#39;</span><span class="token punctuation">,</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        <span class="token keyword">var</span> MsgId <span class="token operator">=</span> <span class="token function">getXMLNodeValue</span><span class="token punctuation">(</span><span class="token string">&#39;MsgId&#39;</span><span class="token punctuation">,</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ToUserName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>FromUserName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>CreateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MsgType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MsgId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n	        <span class="token keyword">var</span> xml <span class="token operator">=</span> <span class="token string">&#39;&lt;xml&gt;&lt;ToUserName&gt;&#39;</span><span class="token operator">+</span>FromUserName<span class="token operator">+</span><span class="token string">&#39;&lt;/ToUserName&gt;&lt;FromUserName&gt;&#39;</span><span class="token operator">+</span>ToUserName<span class="token operator">+</span><span class="token string">&#39;&lt;/FromUserName&gt;&lt;CreateTime&gt;&#39;</span><span class="token operator">+</span>CreateTime<span class="token operator">+</span><span class="token string">&#39;&lt;/CreateTime&gt;&lt;MsgType&gt;&#39;</span><span class="token operator">+</span>MsgType<span class="token operator">+</span><span class="token string">&#39;&lt;/MsgType&gt;&lt;Content&gt;&#39;</span><span class="token operator">+</span>Content<span class="token operator">+</span><span class="token string">&#39;&lt;/Content&gt;&lt;/xml&gt;&#39;</span><span class="token punctuation">;</span>\n	        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error:&quot;</span><span class="token operator">+</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* 获取节点 */</span>\n<span class="token keyword">function</span> <span class="token function">getXMLNodeValue</span><span class="token punctuation">(</span><span class="token parameter">node_name<span class="token punctuation">,</span>xml</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> str <span class="token operator">=</span> xml<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;&quot;</span><span class="token operator">+</span>node_name<span class="token operator">+</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> tempStr <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/&quot;</span><span class="token operator">+</span>node_name<span class="token operator">+</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> tempStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开应用，对着自己公众号发送一条消息，很快也会收到一条内容一样的回复，大功告成！</p><h3 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h3><p>本次实战只为达到简单的操作效果，我们可以对其进行更深层次的处理和封装，具体可以看一看我的开源项目中对微信公众号模块的处理。另外node中有一个比较方便公众号开发的模块 <code>wechat</code> ，它提供了很多便捷的方法如支付以及模版消息等模块的支持，有兴趣的朋友可以自行研究一下。</p>', 15);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    _hoisted_2,
    createBaseVNode("p", null, [
      createTextVNode("关于微信公众平台的开发文档可以去 "),
      createBaseVNode("a", _hoisted_19, [
        createTextVNode("官网"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" 获取，里面有很详细的介绍，以下配图步骤均来自官方文档： 从文档里面我们可以知道，首先我们必须要在自己公众号的后台进行服务器的配置。")
    ]),
    _hoisted_20
  ]);
}
const _010601_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "010601.html.vue"]]);
export {
  _010601_html as default
};
