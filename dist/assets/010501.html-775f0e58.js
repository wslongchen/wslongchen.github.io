import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createBaseVNode, e as createStaticVNode } from "./app-07b098a2.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "div",
  { class: "custom-container info" },
  [
    /* @__PURE__ */ createBaseVNode("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      "xmlns:xlink": "http://www.w3.org/1999/xlink",
      viewBox: "0 0 24 24"
    }, [
      /* @__PURE__ */ createBaseVNode("g", {
        fill: "none",
        stroke: "currentColor",
        "stroke-width": "2",
        "stroke-linecap": "round",
        "stroke-linejoin": "round"
      }, [
        /* @__PURE__ */ createBaseVNode("circle", {
          cx: "12",
          cy: "12",
          r: "9"
        }),
        /* @__PURE__ */ createBaseVNode("path", { d: "M12 8h.01" }),
        /* @__PURE__ */ createBaseVNode("path", { d: "M11 12h1v4h1" })
      ])
    ]),
    /* @__PURE__ */ createBaseVNode("p", { class: "custom-container-title" }, "INFO"),
    /* @__PURE__ */ createBaseVNode("p", null, "本文首发公众号【一名打字员】")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>本文首发公众号【一名打字员】</p><p>相信通过之前的几篇文章，大家都对node有更深层次的了解了。node作为一个灵活性较强的工具，我们可以使用它来做很多很多好玩的东西。前几年微信公众号开发比较火，大街小巷都在招人，所以今天本着实战的目的，给大家介绍一下使用express来开发微信公众号的具体流程。</p><h3 id="express" tabindex="-1"><a class="header-anchor" href="#express" aria-hidden="true">#</a> Express</h3><p>开始前，简单介绍一下express，官方对它的介绍是“基于nodejs平台，快速、开放、极简的web开发框架”。虽然近年来它的生态圈已经远远不如koa强大，很多express应用都用koa进行重写过，但是作为一个从事JAVA后台的打字员来说，还是比较依赖于使用express的。</p><p>简单来说，express可以帮助我们快速的建立一个web应用，有多快呢，接下来就可以看到了。</p><ul><li>安装</li></ul><p>首先我们需要安装Express模块，使用 <code>nom install express -g</code> 安装全局模块，这个过程一般会很快。</p><ul><li>初始化</li></ul><p>安装成功后，我们就可以使用 <code>express</code> 这个工具了。</p><p>￼<img src="https://segmentfault.com/img/bVZmIQ" alt="图片描述"></p><p>通过help列表，我们看到，它有一系列的命令提供使用，后面还有具体的用法。接下来我们初始化一个express应用，使用 <code>express init wechatTest</code>命令express会帮我们快速的创建一个工程，这里面包含着我们基本的框架，可以直接通过 <code>npm install,npm start</code> 运行。</p><p><img src="https://segmentfault.com/img/bVZmJt" alt="图片描述"></p><p>由于默认的端口是3000，所以我们直接访问localhost:3000就能看到express的欢迎界面了。 简单的一个web站就已经建立成功了，怎么样，快不快、意不意外、惊不惊喜？</p><h3 id="庖丁解牛" tabindex="-1"><a class="header-anchor" href="#庖丁解牛" aria-hidden="true">#</a> 庖丁解牛</h3><p>接下来我们一块一块的分析整个结构，对整个项目有一个清晰的了解。</p><ul><li>package.json</li></ul><p>我们上次说过，通过package.json来管理整个项目的依赖以及一些信息的初始化。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wechattest&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./bin/www&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;body-parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.16.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;cookie-parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.4.3&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;debug&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~2.6.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;express&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~4.14.1&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;jade&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.11.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;morgan&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.7.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;serve-favicon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~2.3.2&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们这个项目里面依赖了好几个包，其中每个包的具体作用我们后面再进行讲解。另外我们看到配置里为我们编写了一个 <code>start</code>脚本，所以，我们能够通过<code>npm start</code>来快速的执行脚本。</p><ul><li>app.js</li></ul><p>我们看到根目录下有一个app.js文件，这是整个应用的入口。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入express模块</span>\n<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//url地址解析</span>\n<span class="token keyword">var</span> favicon <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;serve-favicon&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//服务端图标</span>\n<span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;morgan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//日志</span>\n<span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cookie-parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cookie中间件</span>\n<span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//请求中间件</span>\n\n<span class="token comment">//路由</span>\n<span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//模版引擎设置</span>\napp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;views&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;views&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;view engine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jade&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//图标放置于public（静态资源配置）</span>\n<span class="token comment">//app.use(favicon(path.join(__dirname, &#39;public&#39;, &#39;favicon.ico&#39;)));</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">&#39;dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//静态资源中间件</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//404界面捕捉</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Not Found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  err<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>\n  <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//异常界面处理</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// set locals, only providing error in development</span>\n  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>message <span class="token operator">=</span> err<span class="token punctuation">.</span>message<span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>error <span class="token operator">=</span> req<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;env&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">?</span> err <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// render the error page</span>\n  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> app<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注释很清楚的解释了各个部分的作用，在构建一个web服务器的时候，我们通常最重要的工作就是路由处理，也就是响应针对某个路径的请求。在这里我们直接使用路由配置的方法，如 <code>app.get</code> 和 <code>app.post</code>来进行配置。</p><ul><li>中间件</li></ul><p>上面的文件中有提到中间件的概念，在express中，通常在收到请求后和发送响应之前这个阶段执行的一些函数，这个就叫做中间件。在app.js中我们看到可以使用 <code>app.use</code> 来使用某个中间件。其原型如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">[</span>path<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token keyword">function</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如上面的 <code>express.static(path.join(__dirname, &#39;public&#39;))</code> 也是一个中间件，通常用来处理静态文件的目录。</p><ul><li>路由</li></ul><p>在express中，提供了一个Router对象来针对GET、POST等处理的路由，通常把它传给 <code>app.use</code> 。我们可以看到上面引用了一个index模块，打开index.js文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* GET home page. */</span>\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Express&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们拦截了<code>/</code>,所以我们访问localhost根路径的时候就会被这里拦截，然后进行相关的操作，我们可以在这里加入对相关的路径处理。</p><ul><li>模版渲染</li></ul><p>上面介绍了使用路由来对路径的解析和拦截，但是如何在拦截到请求路径的时候，将界面渲染出来呢，这个时候就需要使用模版引擎了。express初始化的时候给我们设置了使用 <code>jade</code> 的模版引擎进行渲染，如index.jade。</p><div class="language-jade line-numbers-mode" data-ext="jade"><pre class="language-jade"><code>extends layout\n\nblock content\n  h1= title\n  p Welcome to #{title}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jade的语法这里不做多的介绍，这里可以去官网中查看具体的说明介绍。</p><h3 id="未完待续" tabindex="-1"><a class="header-anchor" href="#未完待续" aria-hidden="true">#</a> 未完待续</h3><p>由于篇幅过长，这篇文章将会被分为几个小节，这里我们能够使用express搭建起基本的框架，并对其中的一些模块有了一定的了解。之前用java的时候写jsp写的比较多，后来也是使用freemarker等模版引擎渲染界面，所以对jade的语法不是很中意，所以下一章首先会介绍如何将jade换乘ejs，一个语法类似jsp的引擎。</p><p>另外，留言功能已经开通了哟，各位小哥哥小姐姐有问题的可以直接留言哟，欢迎来撩～（奸笑脸）</p>', 39);
const _hoisted_41 = [
  _hoisted_1,
  _hoisted_2
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_41);
}
const _010501_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "010501.html.vue"]]);
export {
  _010501_html as default
};
